8/5/03
This is the readme file.  Its main headings are ...

I. Introduction
II. Overview: How to use these programs.  
III. Sequence of commands used to perform an example analysis.
IV.  General information about the method.
V.  Compiling the software 
VI.  Relevant/Cited Literature


-----------------------------------------------------
I. Introduction

A. What these programs do ...

This software estimates divergence times from DNA or protein sequence
data.  The data may consist of one or more aligned sets of gene
sequences.  The assumption of constant rates of molecular evolution
over time is permitted but not required.  Fossil evidence can be
incorporated into the analysis in the form of constraints on node
times.  For viral and other data sets, dates of sequence isolation
can also be used in the analysis.  In addition to estimating
divergence times, the programs can be employed to assess whether
gene pairs change rate in a correlated fashion over time.

B.  Some points that I feel the urge to make ...

-->  The software is unintentionally user-rude.  This 
software is not PAUP* !!  I am sure that using this software will require 
a large time investment on the part of the user.  I (Jeff Thorne) will be 
happy to try to help you use this software but please don't blame me if you 
can't get it to work with your data.  Reports of problems/bugs and questions 
are welcome.  Constructive criticism regarding this file and whatever else is 
appreciated.  You can contact me via email (thorne@statgen.ncsu.edu) or
phone (U.S.A., 919-515-1946).

-> This software implements Markov chain Monte Carlo (MCMC) procedures for
Bayesian analysis of evolutionary rates and divergence times.
Before doing an analysis with the tools here, it is worthwhile to 
understand a bit about Bayesian approaches, especially be sure to
understand the difference between a prior and a posterior distribution.  It
is also worthwhile to learn something about Markov Chain Monte Carlo (MCMC) 
procedures.  Bayesian analyses and MCMC procedures have a variety of
strengthes and weaknesses.  I make no attempt to list these properties
here.
-----------------------------------------------------

II. Overview: How to use these programs.  

A.  This software requires the topology of the evolutionary tree to be
prespecified.  Software packages for reconstructing evolutionary trees
(e.g., PAML, PAUP*, PHYLIP) could be employed prior to this software.  

B.  After determining the tree topology with other approaches, the 
``estbranches'' program of this software should be used.  The estbranches
program estimates branch lengths of the prespecified evolutionary tree and it 
also estimates the variance-covariance structure of the branch length 
estimates.  The estbranches program works with either DNA or amino acid 
sequences.  Documentation for the estbranches program is found in the 
estbranches.readme file.

C.  Next, the ``multidivtime'' program can be used to read the output of the 
``estbranches'' program and then estimate divergence times.  Documentation
for the multidivtime program is found in the multidivtime.readme file.
-----------------------------------------------------


III. Sequence of commands used to perform an example analysis.

Below are the commands that used to do an example analysis.
Inspecting the sequence of commands listed below may help you
to understand how to run the programs.  Some of the files that
were generated by the example analysis are not included in the
distribution because they take up space and I did not feel that
they aided understanding of the software.
 
I did the example by typing the commands into a "Terminal" window in Mac OSX.
I have also run the programs on linux and other Unix-like systems and
the same commands should work.  With the Windows operating system, some of the 
commands will be different but I am not familiar enough with Windows to tell 
you what to type with the operating system.

For this example, there were DNA sequences of 3 different genes.  The three 
data sets for these genes
are in the files testseq.Gene1, testseq.Gene2, and testseq.Gene3.  Notice
that the species labelled "Taxon_B" is not included in the Gene 1 data.
The topology relating the taxa is in the file example.tree.  The
outgroup for this topology is cleverly named "Outgroup". 

One important part of an analysis that is not depicted below is that
I usually run multidivtime several times to find settings in
multicntrl.dat that generate a reasonable prior distribution.  Only
after finding satisfactory prior settings do I use multidivtime to approximate
posterior distributions.

Below, the lines that begin with "#" are lines where I add some explanation and
the other lines just show what I typed to generate the example...

cc -DDNA estbranches.c -DHESSIAN arrayutl.c inv3.c -lm -O -o estbranches
#compile the program that estimates branch lengths along with their
#variance-covariance matrix.  The "-DDNA" flag above means that DNA
#data will be analyzed.

cc paml2modelinf.c arrayutl.c -lm -O -o paml2modelinf
#compile the program that parses "baseml" output into format needed
#by estbranches program. "baseml" is a program in the PAML package
#written and distributed by Ziheng Yang 
# at http://abacus.gene.ucl.ac.uk/software/paml.html

cc multidivtime.c inv3.c arrayutl.c -lm -O  -o multidivtime
#compile program that estimates divergence times

baseml Gene1.ctl > oGene1 &
#Estimate parameters relating sequences in file testseq.Gene1 according to
#topology in Gene1.tree.  Print important output in file Gene1.out
#Direct screen output to file oGene1.  Notice that topology in example.tree
#file and Gene1.tree are different due to missing Taxon_B is Gene1.tree
#This is why we cannot analyze all three genes in baseml with a single topology
#file such as a slightly modified version of the example.tree file.

baseml Gene2.ctl > oGene2 &
#Now analyze sequence data in testseq.Gene2

baseml Gene3.ctl > oGene3 &
#Now analyze sequence data in testseq.Gene3

paml2modelinf Gene1.out modelinf.Gene1
#parse paml output in Gene1.out to generate formatted nucleotide
#substitution file modelinf.Gene1 

paml2modelinf Gene2.out modelinf.Gene2
#Now parse Gene2 info.

paml2modelinf Gene3.out modelinf.Gene3
#Now parse Gene3 info.

cp testseq.Gene1 testseq
#copy sequence data for Gene 1 to testseq file because testseq
#is the file name that estbranches program expects for sequence data

cp hmmcntrl.Gene1 hmmcntrl.dat
#copy options file for Gene 1 to hmmcntrl.dat because hmmcntrl.dat
#is name expected by estbranches program for options file
 
estbranches oest.Gene1 > out.oest.Gene1 &
#estimate branch lengths and variance-covariance matrix for Gene 1
#place formatted output for multidivtime program into oest.Gene1
#and place output to screen in file out.oest.Gene1

cp hmmcntrl.Gene2 hmmcntrl.dat
cp testseq.Gene2 testseq
estbranches oest.Gene2 > out.oest.Gene2 &
#analyze Gene 2 with estbranches
 
cp hmmcntrl.Gene3 hmmcntrl.dat
cp testseq.Gene3 testseq
estbranches oest.Gene3 > out.oest.Gene3 &
#analyze Gene 3 with estbranches

grep lnL Gene*.out
grep 'FINAL LIKE' out.oes*
#These 2 commands serve as a check on the analysis because
#they allow the maximum log-likelihoods from baseml
#and estbranches to be compared.  If the two log-likelihoods are
#very different, then one or both programs failed to optimize
#the likelihood.  This sort of failure does sometimes happen
#and estbranches fails more often than baseml. 

multidivtime numbers
#multicntrl.dat requires constraints
#on node times to be specified in terms of the numbers of the nodes
#that are being constrained.  If the "numbers" suffix is used when 
#invoking multidivtime, the program is written to abort soon after printing
#the tree topology with node numbers assigned by multidivtime.  These
#node numbers can then be used to specify constraints in multicntrl.dat
#so that multidivtime can later be run to do the actual analysis.

multidivtime example > & out.example &
#This command runs the divergence time estimation part of the analysis.
#Files generated from this run will have a suffix "example".
#The out.example file summarizes posterior means of divergence
#times and rates and other information about the run.
#
#The multicntrl.dat file controls the options for divergence time
#estimation.  The multicntrl.dat file is described in detail in the
#multidivtime.readme file.  

vi inseed
#The Markov chain Monte Carlo method (such as used in multidivtime)
#requires random numbers.  To check to see that the method is correctly
#working, I usually run the program twice or more and then compare
#output from different runs to see if the results are similar.  If the
#results are not sufficiently similar, I run the Markov chain longer
#(i.e., increase values for SAMPFREQ, BURNIN, and NUMSAMPS in the multicntrl.dat
#file).  The file "inseed" contains a number that is the seed for the
#random number generator.  Two runs that read the same number from inseed
#should yield the same results.  The multidivtime program changes
#the inseed file before finishing.  But, if you want
#two multidivtime runs to run on your computer simultaneously so that
#you can check that the divergence times are being well estimated,
#you should change the value of inseed after starting the first run
#and before starting the second run.  This will start the two runs
#at different initial starting points.  To what should you change the
#number in the inseed file?  Answer: any positive integer that 
#you choose, but odd numbers are better than even ones and the number
#probably should be more than a million.  The "vi inseed" command is
#a command that allows the inseed file to be edited with the vi editor.
#You should use whatever editor you prefer, if you do not like or know the
#vi editor. 

multidivtime example2 > & out.example2 &
#This starts a second run for divergence time estimation.  The
#contents of out.example and out.example2 can be compared to determine
#whether the divergence time approximation seems pretty good.  In this
#case, I think it does appear to be pretty good because the entries
#of out.example and out.example2 are pretty similar.


-----------------------------------------------------
IV.  General information about the method.

A.  Evolution of Rate of Molecular Evolution model -- There are many 
reasonable models for how evolutionary rates change
over time.  We have implemented a model where each node has a rate
and the rate on a branch is the average of the rates at the
nodes at its beginning and end.  The logarithm of the "descendant" node
rate has a normal distribution where the expected "descendant" node
rate (rather than the expected logarithm of the rate) is equal to the 
"ancestral" node rate (rather than the logarithm of the node rate).
The variance of this normal distribution is the product of the time
duration of the branch and an autocorrelation parameter that determines
the expected amount of rate variation over time.  We have explored
both the case where all genes in a multigene data set share the
same autocorrelation parameter and the case where each gene has
a unique autocorrelation parameter.  In the latter case, our implementation
assumes that the unique autocorrelation parameter is a realization
from a prior specified by the user.

For technical reasons, one of the branches that emanates from the
ingroup root node is arbitrarily selected.  The same branch
is selected for all genes in a multigene data set.  For this particular
branch only, the rate at the node ending the branch is constrained to have
the same rate as the rate at the ingroup root node.  For all
other branches, the model of rate evolution proceeds as described above.

B.  Constraints -- Fossil evidence can be used to some extent.  The idea
is that fossil evidence may indicate that a certain internal node is at least
X million years old.  Our program can be given information that forces
specified internal nodes on the rooted tree to have ages that equal or
exceed specified values.  Other constraints can force ages to be less
than or equal to certain values.

In Thorne et al. 1998, our results indicated that the method was relatively
successful at estimating proportional times of internal nodes (i.e., the time 
from the present to an internal node of interest divided by the time from
the present to the root of the ingroup).  But, the results indicated 
that the absolute times were not well estimated without constraints.  With
constraints, we believe that there is potential for getting good estimates
of absolute times of internal nodes of interest.

C.  Multivariate Normal Approximation -- To improve computational
tractability, we approximate the likelihood surface with a multivariate
normal distribution centered about the maximum likelihood estimates
of branch lengths (see Thorne et al. 1998).  Finding the maximum
likelihood estimates and making the approximation is what the
estbranches program does.  The multivariate normal approximation seems
to be generally o.k. but it is most problematic when branch lengths are
so short that only a few changes per sequence seem to have occurred
on the branch.  If many branches in the data set are this short, there
is likely to be a problem in divergence time estimation (even when
a molecular clock is assumed).

D. Viral Data -- Because viral evolution occurs so quickly, a viral
sequence isolated in 1985 may be substantially more similar to the
sequence at the root of the tree than a viral sequence isolated in 2000.
The software can take isolation date of sequences into account, although
this feature has only been slightly tested.
Korber and colleagues (2000) were the first to simultaneously
take isolation date into account and allow the rate of evolution to change 
over time.  We copy their general idea here, but we use a different 
implementation and a somewhat different set of assumptions.

E. Prior for divergence times -- In Thorne et al. 1998, our prior was a 
Yule process.  For technical reasons and to make our divergence time
prior more realistic, we are now using a different prior.    

As an aside, one strategy for putting a prior on divergence times is to
explicitly model speciation, extinction, and taxonomic sampling.  If the
model was "good", this would be the right way to do things (in my opinion). 
However, I doubt very much that speciation and extinction and taxonomic 
sampling will be well understood in the near future.  Therefore, I doubt
that explicit models based on speciation, extinction, and taxonomic
sampling will be "good" in the near future.  In my opinion, statistical
models that do not explicitly consider speciation, extinction, and taxonomic
sampling can be more flexible than explicit models of comparable complexity.

For now, let us assume there are no constraints on internal node times
and let us assume that all sequences were isolated at the same time.
In this case, the prior for divergence times works as follows:

1.  A gamma distribution is used to describe the prior distribution
    for the time from present to ingroup root.  The mean and standard
    deviation of the prior are specified by the user.  

2.  All nodes on the user-defined rooted ingroup tree are automatically 
    assigned a "depth" by the program.  The depths of tips are defined to be 
    0.  The depths of other nodes can now be recursively defined by starting 
    at nodes whose child nodes have already had their depth specified.  The 
    depth of a node is defined to be 1 plus the maximum of the depths of its 
    child nodes.

3.  Assume the time from the ingroup root to the present has been determined
    by sampling from the gamma distribution mentioned above.  Now, the
    the prior for the times of other internal nodes given the time 
    of the ingroup root will be described.  Divergence times of internal nodes
    of interest can be described as a product of two factors.  The first factor
    is the divergence time for the parental node of the node of interest.
    The second factor is the time from tip to node of interest divided by
    time from tip to parent of node of interest.  I will use "proportional
    time of a node" to refer to this second factor.

    If the time from tip to ingroup root is already determined, the prior for
    the time of a child node of the ingroup root node can be specified with a 
    prior for the proportional time of the child node.
    Let "a" have some prespecified positive value (e.g., let a=1.0, as in
    the version being distributed).  The current implementation has the 
    proportional time of a node having a prior that is a beta distribution.  
    The first parameter of the beta distribution is the depth of the node 
    multiplied by "a" and the second parameter is "a".  This means that the 
    beta distribution has mean equal to the depth of the node divided by one 
    plus the depth of the node.  

POSSIBLY IMPORTANT POINTS (?): Constraints on internal node times will
affect the divergence time priors.  Similarly, divergence time
priors will be affected if not all sequences are isolated at the same time.
The posterior distribution of divergence times that is approximated by
this software is conditional on the constraints and on the sequence isolation
dates.  The most recently isolated sequence or sequences are assumed
to have time 0 and other sequences are assumed to be isolated at specified
times > 0.  When you run the program with constraints on node times and/or
with sequences that are isolated at different dates, I STRONGLY 
recommend that you use the software to approximate both the prior and
the posterior distribution of divergence times.  For accurate estimation
of divergences times, we have found that it is very helpful if one
node can be required to be "at least X million years old" whereas
another node or maybe the same node can be required to be "no more
than Y million years old".  Bounding from above and from below
somewhere on the tree helps the method more accurately calibrate the rate 
of molecular evolution.

F.  Other priors (specifically, ... the prior for a constant referred to as 
the Greek letter "nu" in Thorne et al. 1998 that determines how fast the 
logarithm of rate of molecular evolution changes over time and ... the 
prior for rate of molecular evolution on one of the two branches 
emanating from the ingroup root) are now assumed to have gamma 
distribution rather than exponential distribution.  


-----------------------------------------------------
V.  Compiling the software 

Two programs (estbranches and multidivtime) need to be compiled.  A third
program (paml2modelinf) may prove useful and can also be compiled. 

If you are using the windows operating system, Tae-Kun Seo has kindly
provided executables ....

estbranches_aa.exe (estbranches compiled for analyzing amino acid sequences)

estbranches_dna.exe (estbranches compiled for analyzing DNA sequences)

paml2modelinf.exe (compiled version of paml2modelinf program)

multidivtime.exe (compiled version of multidivtime program)


Otherwise, to compile the program for estimating branch lengths and branch 
uncertainty from a sequence data set on a user-specified topology type...

cc -DDNA estbranches.c -DHESSIAN arrayutl.c inv3.c -lm -O -o estbranches

... if the data are DNA sequences.  Alternatively, type ...

cc estbranches.c -DHESSIAN arrayutl.c inv3.c -lm -O -o estbranches

... if the data are protein sequences.


To compile the program that actually estimates divergence times, type...

cc multidivtime.c inv3.c arrayutl.c -lm -O  -o multidivtime 

To compile a program that makes it easier to format nucleotide substitution
model files for the estbranches program by parsing the results of the baseml 
program that is part of the PAML software package (freely distributed at
http://abacus.gene.ucl.ac.uk/software/paml.html), type ...

cc paml2modelinf.c arrayutl.c -lm -O -o paml2modelinf



NOTE 1: Your C compiler may be named "acc" or "gcc".  If so, substitute these 
for "cc" above.  

NOTE 2: A very wise man (Dr. Ziheng Yang) tells me that the -O flag in
the above compilation commands will often yield slower programs than
other optimization flags that are compiler-specific.  I am sure that he
is correct.  He suggests -O3 or -O4 could replace the -O above.  Also,
instead of -O, he suggests the gcc 3 compiler in linux could use

-march=athlon -mcpu=athlon -O4 -funroll-loops -fomit-frame-pointer -finline-functions

... for athlon chips and ...

-march=pentiumpro -mcpu=pentiumpro -O4 -funroll-loops -fomit-frame-pointer -finline-functions

for pentiumpro chips.

NOTE 3: This software compiles on linux, various SUN operating
systems, and Mac OSX.  I have not tried it on Windows or recent
unix versions from DEC.  DEC alpha chips with
linux may  require -mieee as an option for compilation. 
DEC alpha chips running DEC unix may require  -ieee_with_no_inexact 
as an option for compilation.


-----------------------------------------------------
VI.  Relevant/Cited Literature


Kishino, H., J.L. Thorne, and W.J. Bruno.  2001.  Performance of a divergence 
time estimation method under a probabilistic model of rate evolution.  Mol 
Bio Evol, 18:352-361.

Korber, B., M. Muldoon, J. Theiler, F. Gao, R. Gupta, A. Lapedes, B.H. Hahn,
S. Wolinsky, and T. Bhattacharya.  2000.  Timing the ancestor of the HIV-1
pandemic strains.  Science 288:1789-1796.

Thorne, J.L., H. Kishino, and I.S. Painter.  1998.  Estimating the rate of
evolution of the rate of molecular evolution.  Mol. Biol. Evol.  15:1647-1657.

Thorne, J.L., and H. Kishino.  2002.  Divergence time and evolutionary rate
estimation with multilocus data.  Systematic Biology 51(5):689-702
